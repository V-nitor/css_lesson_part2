:root{
    --color1: rgb(245, 185, 185);
    --color2: rgb(255, 0, 0);
    --color3: rgb(150, 0, 0);
    --color4: rgb(0, 0, 0);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* ::selection="Allow to change properties when the user highlight text"  at the bottom */
*::selection{
    color: var(--color4);
    background-color: var(--color3);
}

body{
    display: flex;
    justify-content: center;
    align-items: center;
    background: url(./Assets_n2/img/lost-places-597166_1920.jpg) center/cover;
    min-height: 100vh;
    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
    color: var(--color1);
    min-height: 115vh;
    /* hidden="All elements get out of the page doesn't take their existences into consideration"  at the bottom */
    overflow-x: hidden;
}

h6{
    margin: 20px ;
    font-size: 1rem;
    text-align: center;
    color: var(--color2);
}

h1{
    position: relative;
}

h1::after{
    /* Info=An ::after must have a "content" empty or fulfilled to work in the code */
    content: "";
    position: absolute;
    /* Info=If our ::after have an empty "content", we must give it an height, width and also a background! */
    background: var(--color1);
    height: 1px;
    width: 100%;
    left: 50%;
    bottom: -5px;
    transform: translateX(-50%) scaleX(0);
    /* animation: and (name_of_the_animation)="To be connected with the '@keyframes' with the same name (for us, at the bottom) and this seconds; forwards=To keep this new form after this animation" at the bottom */
    animation: anim-h1 6s cubic-bezier(.55,.06,.68,.19) forwards;
    /* transform-origin="Allow to show where the animation must start" at the bottom */
    transform-origin: center;
}

/* @keyframes and (name_of_the_animation)="Create an animation to element in question. For us, the h1" at the bottom */
@keyframes anim-h1{
    /* Info=100% mean during the complete animation */
    100%{
        /* Info=If the element in question have already an attribute similar for the animation [for us: translateX(-50%)]. Don't forget to write the same attributes once again, otherwise they will be erase!! */
        transform: translateX(-50%) scaleX(1);
    }
}

.grid-container{
    margin: 15px 0;
    display: grid;
    grid-template-columns: 20% 80%;
}

.polygon-container{
    background: linear-gradient(145deg, black 0%, rgb(100, 0, 0) 40%, var(--color2) 60%);
    /* Info=The "linear-gradient" will learn step by step :) */
    border-radius: 5px;
}

.shadow-polygon{
    /* Info=Put a "height: 100%;" to give his polygon child an existence form at the bottom */
    height: 100%;
    /* Warning=Unlike usual, the only way to give shadow to your polygon is to go from its respective parent . See at the bottom */
    filter: drop-shadow(7px 0px 1px rgb(255, 255, 255));
}

.shadow-polygon::after{
    content: "\2620 Do you wanna die? \2620";
    color: var(--color2);
    background: var(--color1);
    font-size: 15px;
    width: 80%;
    position: absolute;
    top: 75%;
    left: 50%;
    transform: translate(-50%, 50%) rotate(-10deg);
    text-align: center;
}

/* Info=See how  it work thanks to "bennettfeely.com" at the bottom of the website */
.polygon{
    background: url(./Assets_n2/img/halloween-7479975_640.jpg) top/cover;
    min-height: 340px;
    clip-path: polygon(10% 25%, 35% 25%, 35% 0%, 65% 0%, 65% 25%, 90% 25%, 90% 50%, 65% 50%, 65% 100%, 35% 100%, 35% 50%, 10% 50%);
    height: 100%;
    /* Info=Don't forget the "height", otherwise it doesn't work */
}

.txt-container{
    padding:  0 10px;
    /* place-self="To work, the parent must  be grid's cell by nature" at the bottom */
    place-self: center;
    /* line-height="Margin in height between text" at the bottom */
    line-height: 35px;
    /* Info=To create a line limit with the rest hidden, follow this 4 instructions at the bottom: */
    display: -webkit-box;
    -webkit-box-orient:  vertical;
    -webkit-line-clamp: 5;
    overflow: hidden;
    /* justify="Can space words tidiest like a word projet" at the bottom */
    text-align: justify;
}

input{
    margin-bottom: 20px;
}

.radio-container{
    display: flex;
    justify-content: space-evenly;
    margin-top: 30px;
    margin-left: 65px;
    /* perspective="To use and playing a perspective for 3D animation" at the bottom */
    perspective: 100px;
}

input[type="radio"]{
    display: none;
}

/* :checked="Allow to change properties when the user click onto checkbox"  at the bottom */
input[type="radio"]:checked + label {
    /* Info=At the top, " + " mean same properties together and element individual WHEREAS " ~ " mean same properties together and all elements same time */
    border: 1px solid var(--color3);
    color: rgb(255, 255, 255);
    background: var(--color1);
    transform: scale(1.2);
}

label{
    margin-bottom: 30px;
    cursor: pointer;
    border: 1px solid var(--color4);
    padding: 10px;
    color: var(--color1);
    background: white;
    border-radius: 20px;
    /* Info=To made a good transition enter/out, always put it on the main element! */
    transition: 0.5s;
    /* user-select="It's like the pseudo-class '::selection' but only for a specific element" at the bottom */
    user-select: none;
}

label:first-of-type:hover{
    /* infinite="Same thing than 'repeat', but for animation"; linear="Animation's speed is equal"; alternate="Animation's speed is randomized" at the bottom */
    animation: label1 1s infinite linear;
}

@keyframes label1{
    /* Info=50% mean during the half animation... etc. */
    50%{
        transform: scale(1.6);
    }
    100%{
        transform: scale(1);
    }
}

/* :nth-child()="Allow to select a specific child but WATCH OUT! This number is in reality equivalent to number child in the parent... For us, to the class 'radio-container' as parent. So, our 3rd label is the 6th child in true" at the bottom */
label:nth-child(6):hover{
    /* Tip= At the top, if we want to select children every other time. So between parentheses, instead number, it will be 'odd' for the numbers: 1, 3, 5, etc. & 'even' for the numbers: 2, 4, 6, etc.*/
    animation: label2 0.5s infinite alternate;
}

/* WARNING= To make a 3D animation, never forget to create a 'perspective' to parent */
@keyframes label2{
    25%{
        /* Info= Remember! Z mean perspective!! */
        transform: translateZ(25px)
    }
    50%{
        transform: translateZ(-25px)
    }
    75%{
        transform: translateZ(12.5px)
    }
    100%{
        transform: translateZ(0)
    }
}

.e-mail{
    text-align: center;
    margin-left: 50px;
}

.e-mail > input{
    text-align: center;
    cursor: pointer;
    /* Info= When we want a transition with border and no. The better option is despite that to announce the border size onto element with no border BUT AFTER, give it a "transparent" instead of color */
    border: 1px solid transparent;
    outline: none;
    padding: 5px;
    color: var(--color2);
    background: var(--color3);
    border-radius: 20px;
    transition: 0.5s;
    /* Tip=To avoid the "@media screen" in width. Use a main size in %, then "max-width" and a "min-width" to your element in px... And MAGIC! His width is compatible with all screen width without break a limit form */
    width: 25%;
    max-width: 130px;
    min-width: 100px;
}

/* :focus="This pseudo-class allow to change properties when the user interact with an element like a input[type="text" or "number"] or else a textarea"  at the bottom */
input[type="text"]:focus{
    text-decoration-line: none;
    background: transparent;
    border: 1px solid var(--color3);
    border-radius: 6px;
}

input[type="text"]::placeholder{
    color: var(--color4);
    text-decoration: underline;
}

.the_button{
    text-align: center;
    margin-left: 50px;
}

.the_button > button{
    padding: 3px;
    cursor: pointer;
    color: var(--color2);
    border: solid 2px var(--color4);
}

.the_button > button:hover{
    color: var(--color4);
    background: var(--color3);
    letter-spacing: 6px;
    transition: 2s;
}

/* :active="Allow to change properties when the user press the button in question"  at the bottom */
.the_button > button:active{
    color: var(--color2);
    background: var(--color2);
    border: solid 4px var(--color2);
    border-radius: 44px;
    transition: 0.1s;
}

ul{
    margin-top: 2rem;
    font-family: 'Bloodlust' , cursive;
    text-transform: uppercase;
    font-size: 25px;
    color: var(--color2);
    word-spacing: 5px;
}

#ref{
    text-decoration-line: none;
    color: var(--color3);
    /* Info=This criteria at the bottom SHOULD >:( allow to made an animation when the user pass on the button "valid" */
    display: block;
    transform: translateX(0);
    opacity: 1;
    transition: 0.5s;
}

/* :visited="Allow to change properties when the user click after an <anchor> and <area> that have an "href" attribute"  at the bottom */
#ref:visited{
    color: var(--color4);
}

/* --- Mysterious problem... ---
.the_button > button:hover + #ref{
    transform: translateX(25%);
    opacity: 0;
} */

.card{
    background-color: rgb(112, 114, 110, 0.4);
    /* backdrop-filter= "To render a blurry background" at the bottom */
    backdrop-filter: blur(1px);
    padding: 20px 40px 5px;
    border-radius: 50px;
    width: calc(100% - 50px);
    /* calc= "calculation" at the top */
}

.card:before{
    content: 'I am the 1st for class="card" \2734';
}

.card:after{
    content: 'I am the last for class="card" \2734';
}

body > img{
    position: absolute;
    width: 66px;
    /* Warning Emergency=The 'drop-shadow' must be glued with this parentheses to work correctly */
    filter: drop-shadow(6px 6px 1px var(--color3));
    z-index: -1;
    animation: flydeath 30s infinite;
    overflow: hidden;
}

@keyframes flydeath{
    0%{
        top: 3px;
        left: 3px;
        transform: rotate(90deg);
    }
    10%{
        top: 20%;
        left: 130%;
        transform: rotate(135deg);
    }
   20%{
        transform: scaleX(-1) rotate(135deg);
    }
    30%{
        top: 50%;
        left: -30%;
        transform: scaleX(-1) rotate(180deg);
    }
    40%{
        transform: scaleX(1) rotate(90deg);
    }
    50%{
        top: 80%;
        left: 130%;
        transform: rotate(90deg);
    }
    60%{
        transform: scaleX(-1) rotate(90deg);
    }
    70%{
        top: 100%;
        left: -30%;
        transform: scaleX(-1) rotate(360deg);
    }
    80%{
        transform: scaleX(1) rotate(0deg);
    }
    90%{
        top: 100%;
        left: 3px;
        transform: rotate(22.5deg);
    }
    100%{
        top: 3px;
        left: 3px;
        transform: rotate(90deg);
    }
}